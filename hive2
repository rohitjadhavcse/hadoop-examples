use wo;   
select * from table wo;
select * from table wo1;
select * from table wo2;
select * from table wo3;
select * from table wo4;
insert overwrite table wo
select * from(
select * from wo union all
select * from wo1)e;
describe wo;
select * from wo where sex='f';
create table staff(ecode int,ename string,esal int,city string,sex string,dno int)
partitioned by (s string);
show databases;
show tables;
insert overwrite table staff partitions(s='f')
select * from wo where sex='f';
insert overwrite table staff partitions(s='m')
select * from wo where sex='m';
select * from staff where s='m';
select * from staff where s='f';
create external table stf(ecode int,ename string,esal int,
city string,sex string,dno int)
partitioned by (d int) 
row format delimited fields terminated by ','
location 'user/game';
select * from wo;
insert overwrite table stff
partition (d=11) select * from wo where dno=11;
insert overwrite table stff partition (d=11);
insert overwrite table stff partition (d=12) select * from wo where dno!=11;
select * from stff;
select * from wo where dno=12;
select * from stff where d=12;
create table empl(ecode int,ename string,esal int,city string,
sex string,dno int)
partitioned by (d int,s string)
row format delimited fields terminated by ','
location '/user/urs';
insert overwrite table empl partition (d=11,s='f')
select * from wo where dno=11 and sex='f';
insert overwrite table empl partition (d=11,s='m')
select * from wo where dno=11 and sex='m';
select * from wo where dno=11 and sex='f';
select * from empl where d=11 and s='f';
set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;
create table employee like empl;
insert overwrite table employee partition (d,s)
select * from wo;
insert overwrite table employee partition (d,s)
select ecode,ename,esal,city,sex,dno as d,sex as s from wo;
describe wo;
select ecode,ename,esal,city,sex,dno,dno as d,sex as s from wo;
from wo;
create table sales(dt string,amt int)
row format delimited fields terminated by ',';
load data local inpath'sales' into table sales;
select * from sales;
select year(dt) from sales;
select * from sales;
create table sales2 like sales;
insert overwrite table sales2
select caoncat(split(dt,'/')[2],'-',split(dt,'/')[0],'-',
split(dt,'/')[1]),amt from sales;
select * from sales;
select * from sales2;
insert overwrite table sales2
select * from (
select dt,amt from sales2
union all
select concat('2011',substr(dt,5))as dt,amt from sales2
union all
select concat('2012',substr(dt,5))as dt,amt from sales2
union all
select concat('2013',substr(dt,5))as dt,amt from sales2 )s;
select * from sales2;
create table stab(dt string,amt int)
partitioned by (y int,m int,d int)
row format delimited fields terminated by ',';
select hive.exec.dynamic.partition=true;
select hive.exec.dynamic.partition.mode=nonstrict;
insert overwrite table stab partition(y,m,d)
select dt,amt,year(dt) as y,month(dt) as m,day(dt) as d
from sales2;
show databases;
-- simple xml file
hive> create database xdb;
hive> use xdb;

hive> create table raw(line string);
-- before loading xml data arrange entire xml record into a singe row.
hive> load data local inpath 'xml' overwrite into table raw;
hive> select * from raw;
<rec><name>Ravi</name><age>25</age></rec>
<rec><name>Rani</name><age>23</age><city>hyderabad</city></rec>
hive> create table profiles(name string, age int, city string)
    > row format delimited fields terminated by ',';
hive> select xpath_string(line,'rec/name') from raw;
hive> insert overwrite table profiles
    >   select xpath_string(line,'rec/name'),
    >     xpath_int(line,'rec/age'),
    >       xpath_string(line,'rec/city') from raw;
hive> select * from profiles
    > ;
hive> select * from raw;
_______________________________________
-- simple xml file
hive> create database xdb;
hive> use xdb;
hive> create table raw(line string);
-- before loading xml data arrange entire xml record into a singe row.
hive> load data local inpath 'xml' overwrite into table raw;
hive> select * from raw;
<rec><name>Ravi</name><age>25</age></rec>
<rec><name>Rani</name><age>23</age><city>hyderabad</city></rec>
hive> create table profiles(name string, age int, city string)
    > row format delimited fields terminated by ',';
hive> select xpath_string(line,'rec/name') from raw;
hive> insert overwrite table profiles
    >   select xpath_string(line,'rec/name'),
    >     xpath_int(line,'rec/age'),
    >       xpath_string(line,'rec/city') from raw;
hive> select * from profiles
    > ;
hive> select * from raw;
<rec><name>Ravi</name><age>25</age></rec>
<rec><name>Rani</name><age>23</age><city>hyderabad</city></rec>
--------------------------------------------
hive> create database xdb2;
hive> use xdb2;
hive> 
hive> create table raw(line string);
hive> load data local inpath 'xml2' into table raw;
hive> select * from raw;
<rec><name><fname>Ravi</fname><lname>kumar</lname></name><age>25</age><location><current>hyd</current><native>pune</native></location><contact><email><personal>Ravi@gmail.com</personal><official>Ravi@IBM.com</official></email><phone><residence>1234</residence><mobile>1235</mobile><office>1236</office></phone></contact></rec>
hive> select count(*) from raw;
hive> 
hive> create table profiles(fname string, lname string ,
    >   age int, workcity string, native string,
    >  peremail string, offemail string,
    >   resph string, mobile string, offph string)
    > row format delimited fields terminated by ',';
hive> insert overwrite table profiles
    >  select xpath_string(line,'rec/name/fname'),
    >    xpath_string(line,'rec/name/lname'),     
    >    xpath_int(line,'rec/age'),          
    >    xpath_string(line,'rec/location/current'),
    >    xpath_string(line,'rec/location/native'), 
    >    xpath_string(line,'rec/contact/email/personal'),   
    >    xpath_string(line,'rec/contact/email/official'),
    >    xpath_string(line,'rec/contact/phone/residence'),
    >    xpath_string(line,'rec/contact/phone/mobile'),   
    >    xpath_string(line,'rec/contact/phone/office') 
    >  from raw;
hive> select * from profiles;
hive> 
--------------------------------------------
hive> create database xdb3;
hive> use xdb3;
hive> create table raw(line string);
hive> load data local inpath 'xml3' into table raw;
hive> select * from raw;
<rec><name>Ravi</name><qual>Btech</qual><qual>Mtech</qual></rec>
<rec><name>Rani</name><qual>Bsc</qual><qual>Msc</qual><qual>Mtech</qual></rec>
hive> select xpath(
hive> select xpath(line,'rec/qual/text()') from raw;
hive> 
hive> create table raw2(name string, qual array<string>);
hive> insert overwrite table raw2
    >  select xpath_string(line,'rec/name'),
    >     xpath(line,'rec/qual/text()') from raw;
hive> 
hive> select * from raw2;
hive> select qual[0], qual[1], qual[2] from raw2;
hive> 
hive> select explode(qual) as q  from raw2;
hive> select name, explode(qual) as q  from raw2;
hive> -- column expression can not be given with explode
    > ;
hive> -- solution is lateral view;
hive> select name, myq from raw2 
    >   lateral view explode(qual) q as myq;
hive> create table profiles(name string, qual string)
    > row format delimited fields terminated by ',';
hive> insert overwrite table profiles
    >   select name, myq from raw2
    >    lateral view explode(qual) q as myq;
hive> select * from profiles;
hive> select qual, count(*) from profiles group by qual;
hive> 

--------------------------------------------
hive> create database xdb2;
hive> use xdb2;
hive> 
hive> create table raw(line string);
hive> load data local inpath 'xml2' into table raw;
hive> select * from raw;
<rec><name><fname>Ravi</fname><lname>kumar</lname></name><age>25</age><location><current>hyd</current><native>pune</native></location><contact><email><personal>Ravi@gmail.com</personal><official>Ravi@IBM.com</official></email><phone><residence>1234</residence><mobile>1235</mobile><office>1236</office></phone></contact></rec>
hive> select count(*) from raw;
hive> 
hive> create table profiles(fname string, lname string ,
    >   age int, workcity string, native string,
    >  peremail string, offemail string,
    >   resph string, mobile string, offph string)
    > row format delimited fields terminated by ',';
hive> insert overwrite table profiles
    >  select xpath_string(line,'rec/name/fname'),
    >    xpath_string(line,'rec/name/lname'),     
    >    xpath_int(line,'rec/age'),          
    >    xpath_string(line,'rec/location/current'),
    >    xpath_string(line,'rec/location/native'), 
    >    xpath_string(line,'rec/contact/email/personal'),   
    >    xpath_string(line,'rec/contact/email/official'),
    >    xpath_string(line,'rec/contact/phone/residence'),
    >    xpath_string(line,'rec/contact/phone/mobile'),   
    >    xpath_string(line,'rec/contact/phone/office') 
    >  from raw;
hive> select * from profiles;
hive> 

<rec><name>Ravi</name><age>25</age></rec>
<rec><name>Rani</name><age>23</age><city>hyderabad</city></rec>
__________________________________________________
hive> create database xdb3;
hive> use xdb3;
hive> create table raw(line string);
hive> load data local inpath 'xml3' into table raw;
hive> select * from raw;
<rec><name>Ravi</name><qual>Btech</qual><qual>Mtech</qual></rec>
<rec><name>Rani</name><qual>Bsc</qual><qual>Msc</qual><qual>Mtech</qual></rec>
hive> select xpath(
hive> select xpath(line,'rec/qual/text()') from raw;
hive> 
hive> create table raw2(name string, qual array<string>);
hive> insert overwrite table raw2
    >  select xpath_string(line,'rec/name'),
    >     xpath(line,'rec/qual/text()') from raw;
hive> 
hive> select * from raw2;
hive> select qual[0], qual[1], qual[2] from raw2;
hive> 
hive> select explode(qual) as q  from raw2;
hive> select name, explode(qual) as q  from raw2;
hive> -- column expression can not be given with explode
    > ;
hive> -- solution is lateral view;
hive> select name, myq from raw2 
    >   lateral view explode(qual) q as myq;
hive> create table profiles(name string, qual string)
    > row format delimited fields terminated by ',';
hive> insert overwrite table profiles
    >   select name, myq from raw2
    >    lateral view explode(qual) q as myq;
hive> select * from profiles;
hive> select qual, count(*) from profiles group by qual;
hive> 
________________________________________________
mapreduce code to arrage xml record into single line
bcoz, hive needs total xml record as single row.
____________________________________________________
public class Xml
{
  public static class MyMap extends 
     Mapper<LongWritable,Text,Text,Text>
  {
	  String rec="";
    public void map(LongWritable k, Text v, Context 	
con) throws IOException, InterruptedException
    {
       String line=v.toString().trim();
       rec+=line;
       if(line.matches("</tr>"))
       {   
             con.write(new Text(rec),new Text());
             rec="";
       }
    }
   }
   
   public static void main(String[] args)
    throws Exception
   {
       Configuration c = new Configuration();
       Job j = new Job(c,"Job1");
       j.setJarByClass(Xml.class);
       j.setMapperClass(MyMap.class);
       j.setNumReduceTasks(0);
       j.setOutputKeyClass(Text.class);
       j.setOutputValueClass(Text.class);
       Path inputFile = new Path(args[0]);
       Path outputDir = new Path(args[1]);
       FileInputFormat.addInputPath(j,inputFile);
       FileOutputFormat.setOutputPath(j,outputDir);
       System.exit(j.waitForCompletion(true) ? 0:1);
   }
}
_________________________________________________
hive xml script:-
________________________________________
create database xmldb101;
use xmldb101;
create table raw(line string);
insert overwrite table raw
 select * from xdb4.raw;
create table raw2(cid int, pr array<string>);
insert overwrite table raw2
  select xpath_int(line,'tr/cid'), xpath(line,'tr/pr/text()') from raw;
create external  table sales(cid int, pr int)
  location  '/user/sales';
insert overwrite table sales
 select cid, mypr from raw2
   lateral view explode(pr) p as mypr;
create external table report(cid int , totbill int)
  location '/user/rep';
insert overwrite table report
  select cid, sum(pr) from sales group by cid;
select * from raw;
select * from raw2;
select * from sales;
select * from report;
drop table raw;
drop table raw2;
drop table sales;
drop table report;
drop database xmldb101;
______________________________________________
how to submit script:

$ hive -f <script path>




